'use strict'
const { EventEmitter } = require('events')
const net = require('net')
const { spawn } = require('child_process')

class RTMP extends EventEmitter {
  constructor (config) {
    super()
    this.config = config
    this.config.FFMPEG = config.FFMPEG || 'ffmpeg'
    this.config.RTMP_INPUT = new URL(config.RTMP_INPUT || 'tcp://localhost:9090/key')
    this.config.RTMP_OUTPUT = new URL(config.RTMP_OUTPUT || 'tcp://localhost:9191')
  }

  RTMPInput () {
    const { RTMP_INPUT, FFMPEG, RTMP_OUTPUT } = this.config
    const ffmpegProc = spawn(FFMPEG, [
      '-listen',
      '1', '-i', RTMP_INPUT.href,
      '-c:a', 'aac', '-strict', '-2', '-c:v', 'h264', '-f', 'mpegts', RTMP_OUTPUT.href
    ])

    ffmpegProc.stdout.on('data', (data) => {
      this.emit('raw-data', data)
    })

    ffmpegProc.stderr.on('data', (data) => {
      this.emit('raw-data', data)
    })

    ffmpegProc.on('close', (code) => {
      this.emit('raw-close')
    })
    const exitHandler = () => {
      ffmpegProc.kill('SIGINT')
    }
    process.on('exit', exitHandler)
    this.ffmpegProc = ffmpegProc
  }

  stopRTMPInput () {
    this.ffmpegProc.kill('SIGINT')
  }

  RTMPOutput () {
    const { RTMP_OUTPUT } = this.config
    const server = net.createServer((c) => {
      this.emit('media-request', c)
      c.on('end', () => {
        this.emit('media-end')
      })
      c.on('data', (data) => {
        this.emit('media-data', data)
      })
    })
    server.on('error', (err) => {
      this.emit('media-error', err)
    })
    server.listen(RTMP_OUTPUT.port, () => {
      this.emit('media-started')
    })
  }
}

module.exports = RTMP
